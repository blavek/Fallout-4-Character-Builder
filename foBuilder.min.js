/* Fallout 4 Character Builder JS Copywrite Ken Fitts 2015 */
var character = {
    strength: 1,
    perception: 1,
    endurance: 1,
    charisma: 1,
    intelligence: 1,
    agility: 1,
    luck: 1,
    points: 21,
    perkArray: [],
    level: []
};
var perks = {
    strength: [
		{name: "Iron Fist", 	        levels: [ 2,  9, 18, 31, 46],   ranks: ["Channel your chi to unleash devastating fury! Punching attacks do 20% more damage to your opponent.", "Punching attacks now do 40% more damage and can disarm your opponent.", "Punching attacks now do 60% more damage. Unarmed Power Attacks have a chance to cripple limbs.", "Punching attacks now do 80% more daamge. Unarmed Power Attacks have a better chance to cripple limbs.", "Punching attacks now do double damage. Criticals in VATS will paralyze opponents."], tldr: "Unarmed damage"},
		{name: "Big Leagues",    	    levels: [ 2,  7, 15, 27, 42],   ranks: ["Swing for the fences! Do 20% more melee weapon damage.", "You now do 40% more melee weapon damage and gain a chance to disarm opponents.", "You now do 60% more melee weapon damage and gain an increased chance to disarm opponents.", "You now do 80% more melee weapon damage and hit all targets in front of you.", "You now do double damage with a melee weapon, and gain a chance to cripple opponents, or grand slam their heads clean off!"], tldr: "Melee Weapons damage"},
		{name: "Armorer",    		    levels: [ 2, 13, 25, 39],       ranks: ["Protect yourself from the dangers of the Wasteland with access to base level and Rank 1 armor mods.", "Gain access to Rank 2 armor mods.", "Gain access to Rank 3 armor mods.", "Gain access to Rank 4 armor mods."], tldr: "Armor mods"},
		{name: "Blacksmith", 	        levels: [ 2, 16, 29],           ranks: ["Fire up the forge and gain access to base level and Rank 1 melee weapon mods.", "Gain access to Rank 2 melee weapon mods.", "Gain access to Rank 3 melee weapon mods.", "Gain access to Rank 4 melee weapon mods."], tldr: "Melee Weapon mods"},
		{name: "Heavy Gunner",   	    levels: [ 2, 11, 21, 35, 47],   ranks: ["Thanks to practice and conditioning, heavy guns do 20% more damage.", "Heavy guns now do 40% more damage, and have improved hip fire accuracy.", "Heavy guns now do 60% more damage. Hip fire accuracy is increased even more.", "Heavy guns now do 80% more damage and have a chance to stagger opponents.", "Heavy guns now do double damage."], tldr: "Heavy Gun damage"},
		{name: "Strong Back", 	        levels: [ 2, 10, 20, 30, 40],   ranks: ["What are you, part pack mule? Gain +25 to carry weight.", "You now have +50 to carry weight.", "When overencumbered, you can use Action Points to run.", "When overencumbered, you can fast travel.", "[Far Harbor] When overencumbered, running costs 50% less action points."], tldr: "Carry Weight"},
		{name: "Steady Aim",     	    levels: [ 2, 28, 49],           ranks: ["Stay on target! Hip-fire accuracy is improved when firing any gun.", "Hip-fire accuracy is improved even more when firing any gun.", "[Nuka World] Hip-fire damage is improved when firing any gun."], tldr: "Hip-fire accuracy"},
		{name: "Basher", 		        levels: [ 2,  5, 14, 26],       ranks: ["Get up close and personal! Gun bashing does 25% more damage.", "Gun bashing now does 50% more damage and possibly cripples opponents.", "Gun bashing now does 75% more daamge and has an increased chance to cripple opponents.", "Gun bashing does double damage and has an increased chance to cripple your opponent. It may also inflict a Critical Hit."], tldr: "Gun Bash damage"},
		{name: "Rooted", 	    	    levels: [ 2, 22, 43],           ranks: ["You're part tree! While standing still, you gain +25 Damage Resistance and your melee and unarmed attacks deal 25% more damage.", "When standing still, you now gain +50 Damage Resistance and your melee and unarmed attacks deal 50% more daamge.", "While standing still, you may automatically disarm enemies thatr use melee weapons against you."], tldr: "Melee bonus for not moving"},
		{name: "Pain Train", 	        levels: [ 2, 24, 50],           ranks: ["Choo choo! All aboard! While wearing Power Armor, sprinting into enemies hurts and staggers them. Robots and oversized enemies are immune to stagger.", "Sprinting into enemies while wearing Power Armor now causes severe damage and a more powerful stagger.", "Sprinting into enemies while wearing Power Armor now causes massive damage and knocks them down. Impact landing near enemies inflicts even more damage."], tldr: "Power Armor sprint attack"}
    ],

    perception: [
        {name: "Pickpocket",            levels: [ 2,  6, 17, 30],       ranks: ["Your quick hands and sticky fingers make picking pockets 25% easier.", "Picking pockets is now 50% easier. You can place a live grenade in a person's inventory.", "Picking pockets is now 75% easier, and you can steal equipped weapons.", "Picking pockets is now twice as easy, and you can steal equipped items."], tldr: "Pickpocket bonus"},
        {name: "Rifleman",              levels: [ 2,  9, 18, 31, 46],   ranks: ["Keep your distance long and your kill-count high. Attacks with non-automatic rifles do 20% more damage.", "Attacks with non-automatic rifles now do 40% more damage, and ignore 15% of a target's armor.", "Attacks with non-automatic rifles now do 60% more damage and ignore 20% of a target's armor.", "Attacks with non-automatic rifles now do 80% more damage and ignore 25% of a target's armor. They also have a slight chance of crippling a limb.", "Attacks with non automatic rifles now do double damage and ignore 30% of a target's armor. They have a slightly higher chance of crippling a limb."], tldr: "Non-Automatic Rifle damage"},
        {name: "Awareness",             levels: [ 2, 14],               ranks: ["To defeat your enemies, know their weaknesses! You can view a target's specific damage resistances in VATS.", "[Nuka World] Knowing their weaknesses lets you attack more efficiently. 5% increase to hit chance and damage dealt to VATS targets."], tldr: "See enemy weaknesses"},
        {name: "Locksmith",             levels: [ 2,  7, 18, 41],       ranks: ["Your nimble fingers allow you to pick advanced locks.", "You can pick Expert Locks.", "You can Pick Master Locks.", "Your bobby pins never break during lockpicking."], tldr: "Lockpicking accessibility"},
        {name: "Demolition Expert",     levels: [ 2, 10, 22, 34],       ranks: ["The bigger the boom, the better! Your explosives do 25% more damage, and you can craft explosives at any Chemistry Station.", "Your explosives now do 50% more damage, and grenades gain a throwing arc.", "Your explosives now do 75% more damage and affect a larger area.", "Your explosives now do double damage. Mines and grenades shot in VATS explode for double damage."], tldr: "Craft | Explosive damage"},
        {name: "Night Person",          levels: [ 2, 25, 37],           ranks: ["You are a creature of the night! Gain +2 to Intelligence and Perception between the hours of 6:00 p.m. and 6:00 a.m.", "You now have +3 Intelligence and Perception between the hours of 6:00 p.m. and 6:00 a.m., and night vision when sneaking.", "[Far Harbor] You have 30 extra health between the hours of 6:00 PM and 6:00 AM."], tldr: "Int / Per bonus during hrs: 1800 - 0600 "},
        {name: "Refractor",             levels: [ 2, 11, 21, 35, 42],   ranks: ["You must be part mirror! Instantly gain +10 Energy Resistance.", "You now have +20 Energy Resistance.", "You now have +30 Energy Resistance.", "You now have +40 Energy Resistance.", "You now have +50 Energy Resistance."], tldr: "Energy resistance"},
        {name: "Sniper",                levels: [ 2, 13, 26],           ranks: ["It's all about focus. You have improved control and can hold your breath longer when aiming with scopes.", "Non-automatic, scoped rifles have a chance of knocking down your target.", "Non-automatic, scoped rifles gain +25% accuracy to head shots in VATS."], tldr: "Scoped effectiveness"},
        {name: "Penetrator",            levels: [ 2, 28],               ranks: ["There's no place to hide! In VATS you can target an enemy's body parts that are blocked by cover, with a decrease in accuracy.", "In VATS when you target an enemy's body parts that are blocked by cover, there is no decrease in accuracy."], tldr: "Ignore enemy cover in V.A.T.S"},
        {name: "Concentrated Fire",     levels: [ 2, 26, 50],           ranks: ["Stay focused! In VATS every attack on the same body part gains +10% accuracy.", "In VATS every attack on the same body part gains +15% accuracy.", "In VATS every attack on the same body part gains +20% accuracy and does 20% more damage."], tldr: "Accuracy / Damage bonus on same body part in V.A.T.S"}
    ],

    endurance: [
        {name: "Toughness",             levels: [ 2,  9, 18, 31, 46],   ranks: ["If nothing else, you can take a beating! Instantly gain +10 Damage Resistance.", "You now have +20 Damage Resistance.", "You now have +30 Damage Resistance.", "You now have +40 Damage Resistance.", "You now have +50 Damage Resistance."], tldr: "Physical Damage resistance"},
        {name: "Lead Belly",            levels: [ 2,  6, 17],           ranks: ["Your digestive tract has adjusted to the weirdness of the Wasteland! Take less radiation from eating or drinking.", "You take even less radiation from eating or drinking.", "You take no radiation from eating or drinking."], tldr: "Less Rads from eating and drinking"},
        {name: "Life Giver",            levels: [ 2,  8, 20],           ranks: ["You embody wellness! Instantly gain +20 maximum health.", "You instantly gain another +20 maximum health.", "You instantly gain another +20 maximum health, and slowly regenerate lost health."], tldr: "Health bonus | Health regen"},
        {name: "Chem Resistant",        levels: [ 2, 22],               ranks: ["All the rush without the hassle! You're 50% less likely to get addicted when consuming chems.", "You gain complete immunity to chem addiction."], tldr: "Chem addiction chance reduction"},
        {name: "Aquaboy",               levels: [ 2, 21],               ranks: ["Water is your ally. You no longer take radiation damage from swimming, and can breathe underwater.", "You become totally undetectable while submerged."], tldr: "No rads from swimming | breathe | stealth under water"},
        {name: "Rad Resistant",         levels: [ 2, 13, 26, 35],       ranks: ["Exposure to the Wasteland has made you more resilient, instantly granting +10 Radiation Resistance.", "You now have +20 Radiation Resistance.", "You now have +30 Radiation Resistance.", "[Far Harbor] You now have +40 Radiation Resistance."], tldr: "Radiation resistance"},
        {name: "Adamantium Skeleton",   levels: [ 2, 13, 26],           ranks: ["Your skeleton has been infused with indestructible metal, reducing limb damage by 30%, Your limb damage is now reduced by 60%.", "Your limb damage is completely eliminated."], tldr: "Limb damage reduction"},
        {name: "Cannibal",              levels: [ 2, 19, 38],           ranks: ["Feast on mortal flesh to heal your wounds! Eating human corpses restores Health.", "Eating Ghoul or Super Mutant corpses restores health.", "Eating human, Ghoul, or Super Mutant corpses restores a significant amount of health."], tldr: "Eat corpses to restore health"},
        {name: "Ghoulish",              levels: [ 2, 24, 48, 50],       ranks: ["Sure, you're still human - on the outside! Radiation now regenerates your lost Health.", "Radiation now regenerates even more of your lost Health.", "Radiation now regenerates even more of your lost Health, and some Feral Ghouls will randomly become friendly.", "[Nuka World] Rad damage will now begin to slowly heal, restoring health in the process."], tldr: "Radiation regenerates health"},
        {name: "Solar Powered",         levels: [ 2, 27, 50],           ranks: ["Catch some rays! Gain +2 to Strength and Endurance between the hours of 6:00 a.m. and 6:00 p.m.", "Sunlight slowly heals your radiation damage.", "Sunlight regenerates your lost Health."], tldr: "Str / End bonus during hrs: 0600-1800 | Sun regens health"}
    ],

    charisma: [
        {name: "Cap Collector",         levels: [ 2, 20, 41],           ranks: ["You've mastered the art of the deal! Buying and selling prices at vendors are better.", "Buying and selling prices at vendor are now much better.", "You can invest a total of 500 caps to raise a store's bounty capacity."], tldr: "Better prices"},
        {name: "Lady Killer",           levels: [ 2,  7, 22],           ranks: ["You're charming... and dangerous. Women/Men suffer +5% damage in combat, and are easier to persuade in dialogue.", "Women/Men now suffer +10 damage in combat, and are even easier to persuade in dialogue. They are also easier to pacify with the Intimidation perk.", "Women/Men now suffer +15% damage in combat, and are much easier to persuade in dialogue. They are now even easier to pacify with the Intimidation perk."], tldr: "Opposite Gender increased damage and influence"},
        {name: "Lone Wanderer",         levels: [ 2, 17, 40, 50],      ranks: ["Who needs friends, anyway? When adventuring without a companion, you take 15% less damage and carry weight increases by 50.", "When adventuring without a companion, you take 30% less damage and carry weight increases by 100.", "When adventuring without a companion, you do 25% more damage.", "[Far Harbor] When adventuring without a companion, you have 25 more action points."], tldr: "Bonuses without companion"},
        {name: "Attack Dog",            levels: [ 2,  9, 25, 31],       ranks: ["Your faithful canine companion can hold an enemy, giving you a greater chance to hit them in V.A.T.S.", "When your dog holds an enemy, there's a chance he'll cripple the limb he's biting.", "When your dog holds an enemy, there's a chance he'll cause them to bleed.", "[Nuka World] When adventuring with your dog, you take 10% less damage."], tldr: "Dog can hold, cripple and bleed enemies"},
        {name: "Animal Friend",         levels: [ 2, 12, 28],           ranks: ["Commune with beasts! With your gun, aim at any animal below your level and gain a chance to pacify it.", "When you successfully pacify an animal, you can incite it to attack.", "When you successfully pacify an animal, you can give it specific commands."], tldr: "Pacify enemies"},
        {name: "Local Leader",          levels: [ 2, 14],               ranks: ["As the ruler everyone turns to, you are able to establish supply lines between your workshop settlements.", "You can build stores and workstations at workshop settlements."], tldr: "Connect and improve settlements"},
        {name: "Party Boy",             levels: [ 2, 15, 37],           ranks: ["Nobody has a good time like you! There's no chance you'll get addicted to alcohol.", "The effects of alcohol are doubles.", "Your Luck is increased by 3 while you're under the influence of alcohol."], tldr: "Alchohol is your friend"},
        {name: "Inspirational",         levels: [ 2, 19, 43],           ranks: ["Because you lead by example, your companion does more damage in combat, and cannot hurt you.", "Your companion resists more daamge in combat, and can't be harmed by your attacks.", "Your companion can carry more items."], tldr: "Companion enhanced"},
        {name: "Wasteland Whisperer",   levels: [ 2, 21, 49],           ranks: ["Master the post-apocalypse! With your gain, aim at any Wasteland creature below your level and gain a chance to pacify it.", "When you successfully pacify a Wasteland creature, you can incite it to attack.", "When you succesffully pacify a Wasteland creature, you can give it specific commands."], tldr: "Pacify creatures"},
        {name: "Intimidation",          levels: [ 2, 23, 50],           ranks: ["Time to show everyone who's boss! With your gun, aim at any human below your level and gain a chance to pacify them.", "When you successfully pacify someone, you can incite them to attack.", "When you successfully pacify someone, you can give them specific commands."], tldr: "Pacify humans"}
    ],

    intelligence: [
        {name: "V.A.N.S.",              levels: [ 2, 36],               ranks: ["Let Vault-Tec guide you! The path to your closest quest target is displayed in V.A.T.S.", "[Nuka World] Gain +2 to Perception."], tldr: "Improve Pip-Boy map notes"},
        {name: "Medic",                 levels: [ 2, 18, 30, 49],       ranks: ["Is there a doctor in the house? Stimpacks restore 40% of lost health, and RadAway removes 40% of radiation.", "Stimpaks now restore 60% of lost Health, and RadAway removes 60% of radiation.", "Stimpacks now restore 80% of lost health, and RadAway removes 80% of radiation", "Stimpacks and RadAway restore all lost health and radiation, and work much more quickly."], tldr: "Stimpaks and Radaway more effective"},
        {name: "Gun Nut",               levels: [ 2, 13, 25, 39],       ranks: ["Shoot first, kill first, with access to base level and Rank 1 gun mods.", "You gain access to Rank 2 gun mods.", "You gain access to Rank 3 gun mods.", "You gain access to Rank 4 gun mods. Rank 49"], tldr: "Gun Mods"},
        {name: "Hacker",                levels: [ 2,  9, 21, 33],       ranks: ["Knowledge of cutting-edge computer encryption allows you to hack Advanced terminals.", "You can hack Expert terminals.", "You can hack Master terminals.", "When hacking, you never get locked out of a terminal when things go wrong."], tldr: "Hacking accessibility"},
        {name: "Scrapper",              levels: [ 2, 23, 40],           ranks: ["Waste not, want not! You can salvage uncommon components like screws, aluminum and copper when scrapping weapons and armor.", "You can salvage rare components like circuitry, nuclear material, and fiberoptics when scrapping weapons and armor. Items with favorited components are highlighted.", "[Far Harbor] You get more from salvaging."], tldr: "Salvage rare components"},
        {name: "Science",               levels: [ 2, 17, 28, 41],       ranks: ["Take full advantage of advaned technology with access to ase level and Rank 1 high-tech mods.", "You gain access to Rank 2 high-tech mods.", "You gain access to Rank 3 high-tech mods.", "You gain access to Rank 4 high-tech mods."], tldr: "High-Tech mods"},
        {name: "Chemist",               levels: [ 2, 16, 32, 45],       ranks: ["Any chems you take last 50% longer. Far out.", "Any chems you take last twice as long.", "Any chems you take last an additional 150% longer.", "Any chems you take last an additional 200% longer."], tldr: "Chems last longer"},
        {name: "Robotics Expert",       levels: [ 2, 19, 44],           ranks: ["Machines will always serve humans, if you have anything to say about it. Hack a robot, and gain a chance to power it on or off, or initate a self-destruct.", "When you successfully hack a robot, you can incite it to attack.", "When you successfully hack a robot, you can give it specific commands."], tldr: "Hack robots"},
        {name: "Nuclear Physicist",     levels: [ 2, 14, 26],           ranks: ["You've learned to split the atom... and command it. Radiation weapon do 50% more damage and Fusion Cores last an extra 25% longer.", "Radiation weapons now do double damage and Fusion Cores last an extra 50% longer.", "Fusion Cores can be ejected from Power Armor like devastating grenades and Fusion Cores last twice as long."], tldr: "Fusion cores last longer / eject | Radiation weapon damage "},
        {name: "Nerd Rage!",            levels: [ 2, 31, 50],           ranks: ["Genius. Is. ANGRY! When your Health drops below 20%, time slows and you gain +20 Damage Resistance and do 20% more damage while the effect lasts.", "You now gain 30 more Damage Resistance and do 30% more damage while Nerd Rage is in effect.", "You now gain 40 more Damage Resistance and do 40% more damage while Nerd Rage is in effect. Kills you make while enraged restores some lost Health."], tldr: "Damage resistance | Damage increase at low health"}
    ],

    agility: [
        {name: "Gunslinger",            levels: [ 2,  7, 15, 27, 42],   ranks: ["Channel the spirit of the Old West! Non-automatic pistols do 20% more damage.", "Non-automatic pistols do 40% more damage and have increased range.", "Non-automatic pistols now do 60% more damage and range is increased even further.", "Non-automatic pistols now do 80% more damage and their attacks can disarm opponents.", "Non-automatic pistols now do double damage. Their attacks have a much better chance to disarm opponents, and may even cripple a limb."], tldr: "Non-Automatic pistol damage | Disarm"},
        {name: "Commando",              levels: [ 2, 11, 21, 35, 49],   ranks: ["Rigorous combat training means automatic weapons do 20% more damage.", "Your automatic weapons now do 40% more damage, with improved hip fire accuracy.", "Your automatic weapons now do 60% more damage. Hip fire accuracy is improved even more.", "Your automatic weapons now do 80% more damage and gain a chance to stagger opponents.", "Your automatic weapons now do double damage and have a greater chance to stagger opponents."], tldr: "Automatic weapon damage | Stagger"},
        {name: "Sneak",                 levels: [ 2,  5, 12, 23, 38],   ranks: ["Become whisper, become shadow. You are 20% harder to detect while sneaking.", "You are now 30% harder to detect when sneaking, and no longer trigger floor-based traps.", "You are now 40% harder to detect when sneaking, and no longer trigger enemy mines.", "You are now 50% harder to detect when sneaking, and running no longer adversely affects stealth.", "Engaging stealth causes distant enemies to lose you."], tldr: "Harder to detect when sneaking"},
        {name: "Mister Sandman",        levels: [ 2, 17, 30],           ranks: ["As an agent of death itself, you can instantly kill a sleeping person. Your silenced weapons do an additional 15% sneak attack damage.", "Your silenced weapons do an additional 30% sneak attack damage.", "Your silenced weapons do an additional 50% sneak attack damage"], tldr: "Silenced weapon damage"},
        {name: "Action Boy",            levels: [ 2, 18, 38],               ranks: ["There's no time to waste! Your Action Points regenerate 25% faster.", "Your Action Points now regenerate 50% faster.", "[Far Harbor] Your Action Points now regenerate 75% faster."], tldr: "Action Point regeneration"},
        {name: "Moving Target",         levels: [ 2, 24, 44],           ranks: ["They can't hurt what they can't hit! Get +25 Damage Resistance and +25 Energy Resistance when you're sprinting.", "You now get +50 Damage Resistance and +50 Energy Resistance when you're sprinting.", "Sprinting costs 50% fewer Action Points."], tldr: "Damage, Energy resistance when sprinting | Less AP to sprint"},
        {name: "Ninja",                 levels: [ 2, 16, 33],           ranks: ["Trained as a shadow warrior, your ranged sneak attacks do 2.5x normal damage and your melee sneak attacks do 4x normal damage.", "Your ranged attacks do 3x normal damage and your melee sneak attacks do 5x normal damage.", "Your ranged attacks so 3.5x normal damage and your melee sneak attacks do 10x normal damage."], tldr: "Sneak Attack bonuses"},
        {name: "Quick Hands",           levels: [ 2, 28, 40],           ranks: ["In combat, there's no time to hesitate. You can reload all guns faster.", "Reloading guns costs no Action Points in VATS.", "[Nuka World] Quick and efficient. You gain 10 additional Action Points."], tldr: "Reload faster and remove AP reload cost"},
        {name: "Blitz",                 levels: [ 2, 29],               ranks: ["Find the gap and make the tackle! V.A.T.S. melee distance is increased significantly.", "VATS melee distance is increased even more, and the farther the Blitz distance, the greater the damage."], tldr: "Melee distance increased"},
        {name: "Gun Fu",                levels: [ 2, 26, 50],           ranks: ["You've learned to apply ancient martial arts to gunplay! Do 25% more damage to your second VATS target and beyond.", "In VATS you do 50% more damage to your third target and beyond.", "In VATS you instantly do a Critical hit against your fourth target and beyond."], tldr: "Increase damage to second target and beyond in V.A.T.S."}
    ],

    luck: [
        {name: "Fortune Finder",        levels: [ 2,  5, 25, 40],       ranks: ["You've learned to discover the Wasteland's hidden wealth, and find more bottle caps in containers.", "You find even more bottle caps in containers.", "You find even more bottle caps in containers.", "You find even more bottle caps in containers, and there is a chance of enemies exploding in a shower of caps when you kill them."], tldr: "Find more Caps"},
        {name: "Scrounger",             levels: [ 2,  7, 24, 37],       ranks: ["You know just how to scavenge to keep the fight going, and find more ammunition in containers.", "You find even more ammunition in containers.", "You find even more ammunition in containers.", "You find even more ammuntion in containers."], tldr: "Find more Ammo"},
        {name: "Bloody Mess",           levels: [ 2,  9, 31, 47],       ranks: ["+5% bonus damage means enemies will sometimes explode into a gory red paste. Watch out for flying eyeballs!", "You now inflict +10% damage in combat.", "You can now inflict +15% damage in combat.", "When an enemy explodes, nearby enemies may suffer the same fate."], tldr: "Damage bonus | Enemies explode"},
        {name: "Mysterious Stranger",   levels: [ 2, 22, 41, 49],       ranks: ["Who is he? Why does he help? Who cares! The Mysterious Stranger will appear occasionally in VATS to lend a hand, with deadly efficiency...", "The Mysterious Stranger appears more often in VATS.", "The Mysterious Stranger appears more often in VATS. When he kills an opponent, there is a chance your critical meter gets filled.", "[Nuka World] The Mysterious Stranger appears more often in V.A.T.S. When he kills an opponent, there is a high chance your Critical meter gets filled."], tldr: "Stranger appears in V.A.T.S. "},
        {name: "Idiot Savant",          levels: [ 2, 11, 34],           ranks: ["You're not stupid! Just... different. Randomly recieve 3x XP from any action, the lower your Intelligence, the greater the chance.", "You now randomly recieve 5x XP from any action. The lower your Intelligence, the greater the chance.", "Randomly receiving bonus XP from any action may trigger 3x XP for all kills for a short period of time. The lower your Intelligence, the greater the chance."], tldr: "XP bonus if you're dumb"},
        {name: "Better Criticals",      levels: [ 2, 15, 40],           ranks: ["Advanced training for enhanced combat effectiveness! Criticals do 50% more damage.", "Your criticals now do twice as much damge.", "Your criticals now do 2.5x as much extra damage."], tldr: "More Critical damage"},
        {name: "Critical Banker",       levels: [ 2, 17, 43, 50],           ranks: ["You're a patient battlefield tactician, and can save a Critical Hit, to be used in VATS, when your need it most.", "You can now save 2 Critical Hits, to be used in VATS, when you need them most.", "You can now save 3 Critical Hits, to be used in VATS when you need them most. Banking a Critical has a chance to save an additional Critical.", "[Far Harbor] You can now save 4 Critical Hits, to be used in V.A.T.S. when you need them the most."], tldr: "Save Crits in V.A.T.S."},
        {name: "Grim Reaper's Sprint",  levels: [ 2, 19, 46],           ranks: ["Death becomes you! Any kill in V.A.T.S. has a 15% chance to restore all Action Points.", "Any kill in VATS now has a 25% chance to restore all Action Points.", "Any kill in VATS now has a 35% chance to restore all Action Points and refill your Critical Meter."], tldr: "Kills in V.A.T.S. have chance to restore AP"},
        {name: "Four Leaf Clover",      levels: [ 2, 13, 32, 48],       ranks: ["Feeling lucky? You should! Each hit in V.A.T.S. has a chance of filling your Critical meter.", "Each hit in VATS now has an even better chance of filling your Critical Meter.", "Each hit in VATS now has a very good chance of filling your Critical Meter.", "Each hit in VATS now has an excellent chance of filling your Critical Meter."], tldr: "Hits in V.A.T.S. have chance to fill Crit Meter"},
        {name: "Ricochet",              levels: [ 2, 29, 50],           ranks: ["What goes around comes around! An enemy's ranged attack will sometimes richochet back and instantly kill them. The close you are to death, the higher the chance.", "There's an increasd chance that an enemy's shot will ricochet back and kill them.", "When an enemy's shot ricochets back and kills them, there's a chance your Critical meter gets filled."], tldr: "Enemy's shots have chance to be deflected back at shooter"}
	]
};

function findInPerk(array, val0, val1, val2) {
    for (var i = 0; i < array.length; i++) {
            if (array[i].special == val0 && array[i].rank == val1 && array[i].levels == val2) return (i);
    }
    return (-1);
}

function findInPerkNoLevel(array, val0, val1) {
    for (var i = 0; i < array.length; i++) {
        if (array[i].special == val0 && array[i].rank == val1) return (i);
    }
    return (-1);
}

function displayLevels() {
    var divSwitch = 23;
    if (character.level.length >= 75) {
        $("#levelListb").html("<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>");
        $("#levelListc").html("<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>");
        $("#levelListd").html("<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>");
        $("#levelListb").css("display", "inline-block");
        $("#levelListc").css("display", "inline-block");
        $("#levelListd").css("display", "inline-block");
        divSwitch = Math.ceil(character.level.length / 4);
    } else if (character.level.length >= 50) {
        $("#levelListb").html("<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>");
        $("#levelListc").html("<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>");
        $("#levelListb").css("display", "inline-block");
        $("#levelListc").css("display", "inline-block");
        $("#levelListd").css("display", "none");
        divSwitch = Math.ceil(character.level.length / 3);
    } else if (character.level.length >= 25) {
        $("#levelListb").html("<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>");
        $("#levelListb").css("display", "inline-block");
        $("#levelListc").css("display", "none");
        $("#levelListd").css("display", "none");
        divSwitch = Math.ceil(character.level.length / 2);
    } else {
        $("#levelListb").css("display", "none");
        $("#levelListc").css("display", "none");
        $("#levelListd").css("display", "none");
    }
    $("#levelLista").html("<div class='levelRow'><span class='charLevel'>Level</span><span class='perkName'>Perk</span></div>");
    div = "#levelLista";
    for (var i = 0; i < character.level.length; i++) {
        if (i % divSwitch == 0 && i > 0) {
            if (div == "#levelListc") div = "#levelListd";
            if (div == "#levelListb") div = "#levelListc";
            if (div == "#levelLista") div = "#levelListb";
        }
        if (character.level[i] !== undefined) {
            $(div).html($(div).html() + "<div class='levelRow'><span class='charLevel'>" + (i + 2) + "</span><span class='perkName'>" + character.level[i].name + "</span></div>");
        } else {
            $(div).html($(div).html() + "<div class='levelRow'><span class='charLevel'>" + (i + 2) + "</span><span class='perkName'>Free</span></div>");
        }
    }
    if (character.level.length <= 0) {
        $(".levelList").css("height", "200px");
    } else {
        $(".levelList").css("height", "auto");
    }
}

function firstUndef(array, start) {
    if (array[start] == undefined) return (start);
    for (var i = start; i <= array.length; i++) {
        if (array[i] === undefined) return (i);
    }
    return (0);
}

function getPerk(perk, stat) {
//    for (var i = 0; i < perk[0].levels.length; i++) {
        character.level[firstUndef(character.level, perk[0].levels + -2)] = perk[0];
//    }
    perk.splice(findInPerk(perk, perk[0].special, perk[0].rank, perk[0].levels), 1);
}

function getSpecial(spec) {
    switch (spec) {
        case "s":
            character.strength++;
            character.level[firstUndef(character.level, 0)] = {
                special: "strength",
                rank: character.strength,
                name: "Strength",
                levels: [],
                tldr: "Carry Weight",
                priority: ""
            };
            break;
        case "p":
            character.perception++;
            character.level[firstUndef(character.level, 0)] = {
                special: "perception",
                rank: character.strength,
                name: "Perception",
                levels: [],
                tldr: "Perception",
                priority: ""
            };
            break;
        case "e":
            character.endurance++;
            character.level[firstUndef(character.level, 0)] = {
                special: "endurance",
                rank: character.strength,
                name: "Endurance",
                levels: [],
                tldr: "Endurance",
                priority: ""
            };
            break;
        case "c":
            character.charisma++;
            character.level[firstUndef(character.level, 0)] = {
                special: "charisma",
                rank: character.strength,
                name: "Charisma",
                levels: [],
                tldr: "Charisma",
                priority: ""
            };
            break;
        case "i":
            character.intelligence++;
            character.level[firstUndef(character.level, 0)] = {
                special: "intelligence",
                rank: character.strength,
                name: "Intelligence",
                levels: [],
                tldr: "Intelligence",
                priority: ""
            };
            break;
        case "a":
            character.agility++;
            character.level[firstUndef(character.level, 0)] = {
                special: "agility",
                rank: character.strength,
                name: "Agility",
                levels: [],
                tldr: "Agility",
                priority: ""
            };
            break;
        case "l":
            character.luck++;
            character.level[firstUndef(character.level, 0)] = {
                special: "luck",
                rank: character.strength,
                name: "Luck",
                levels: [],
                tldr: "Luck",
                priority: ""
            };
            break;
    }
}

function checkSpecial(spec, rank) {
    var stat;
    switch (spec) {
        case "s":
            stat = character.strength;
            break;
        case "p":
            stat = character.perception;
            break;
        case "e":
            stat = character.endurance;
            break;
        case "c":
            stat = character.charisma;
            break;
        case "i":
            stat = character.intelligence;
            break;
        case "a":
            stat = character.agility;
            break;
        case "l":
            stat = character.luck;
            break;
    }
    if (stat >= rank) {
        return (true);
    }
    return (false);
}

function calcLevel() {
    sortPerkArrayByLevel();
//    sortPerkArray();

    var i = 0;
    var perks = character.perkArray.slice(0);
    character.level = [];
    while (perks.length > 0) {
        switch (perks[0].special) {
            case "strength":
                if (checkSpecial("s", perks[0].rank)) {
                    getPerk(perks, character.strength)
                } else {
                    getSpecial("s");
                }
                break;
            case "perception":
                if (checkSpecial("p", perks[0].rank)) {
                    getPerk(perks, character.perception)
                } else {
                    getSpecial("p");
                }
                break;
            case "endurance":
                if (checkSpecial("e", perks[0].rank)) {
                    getPerk(perks, character.endurance)
                } else {
                    getSpecial("e");
                }
                break;
            case "charisma":
                if (checkSpecial("c", perks[0].rank)) {
                    getPerk(perks, character.charisma)
                } else {
                    getSpecial("c");
                }
                break;
            case "intelligence":
                if (checkSpecial("i", perks[0].rank)) {
                    getPerk(perks, character.intelligence)
                } else {
                    getSpecial("i");
                }
                break;
            case "agility":
                if (checkSpecial("a", perks[0].rank)) {
                    getPerk(perks, character.agility)
                } else {
                    getSpecial("a");
                }
                break;
            case "luck":
                if (checkSpecial("l", perks[0].rank)) {
                    getPerk(perks, character.luck)
                } else {
                    getSpecial("l");
                }
                break;
        }
        i++;
    }

    displayLevels()
}

function calculate() {
    document.getElementById("progress").innerHTML = "<p>Calculating...</p>";
    $("button").prop('disabled', true);
    setTimeout(function() {
        inputs = $(".priority");
        for (var i = 0; i < inputs.length; i++) {
            character.perkArray[findInPerk(character.perkArray, $(inputs[i]).attr("special"), $(inputs[i]).attr("rank"), $(inputs[i]).attr("levels"))].priority = $(inputs[i]).val();
        }
        sortPerkArray();
        buildSpecials();
        buildPerkList();
        calcLevel();
        $("#progress").html("<p>Done!</p>");
        $("button").prop('disabled', false);
    }, 10);
}

function correctStat(stat, rank) {
    if (character.points - ((rank) - stat) >= 0) {
        character.points = character.points - ((rank) - stat);
        stat = rank;
    } else {
        stat += character.points;
        character.points = 0;
    }
    return stat;
}

function calcRanks() {
    character.strength = 1;
    character.perception = 1;
    character.endurance = 1;
    character.charisma = 1;
    character.intelligence = 1;
    character.agility = 1;
    character.luck = 1;
    character.points = 21;
    var i = 0;
    if (character.perkArray.length == 0) return;
    while (character.points > 0 && character.perkArray[i] !== undefined) {
        var special = character.perkArray[i].special;
        var rank = character.perkArray[i].rank;
        switch (special) {
            case "strength":
                if (character.strength < rank) {
                    character.strength = correctStat(character.strength, rank)
                }
                break;
            case "perception":
                if (character.perception < rank) {
                    character.perception = correctStat(character.perception, rank);
                }
                break;
            case "endurance":
                if (character.endurance < rank) {
                    character.endurance = correctStat(character.endurance, rank)
                }
                break;
            case "charisma":
                if (character.charisma < rank) {
                    character.charisma = correctStat(character.charisma, rank);
                }
                break;
            case "intelligence":
                if (character.intelligence < rank) {
                    character.intelligence = correctStat(character.intelligence, rank);
                }
                break;
            case "agility":
                if (character.agility < rank) {
                    character.agility = correctStat(character.agility, rank);
                }
                break;
            case "luck":
                if (character.luck < rank) {
                    character.luck = correctStat(character.luck, rank);
                }
                break;
        }
        i++;
    }
}

function buildSpecials() {
    calcRanks();
    $("#char").html("<div class='charRow'><span class='specLevel'>Starting Special</span></div>" + "<div class='charRow'><span class='specLevel'>Strength</span><span class='levelBox'>" + character.strength + "</span><span class='levelBox'>+ " + (Number(character.strength) - 1) + "</span></div>" + "<div class='charRow'><span class='specLevel'>Perception</span><span class='levelBox'>" + character.perception + "</span><span class='levelBox'>+ " + (Number(character.perception) - 1) + "</span></div>" + "<div class='charRow'><span class='specLevel'>Endurance</span><span class='levelBox'>" + character.endurance + "</span><span class='levelBox'>+ " + (Number(character.endurance) - 1) + "</span></div>" + "<div class='charRow'><span class='specLevel'>Charisma</span><span class='levelBox'>" + character.charisma + "</span><span class='levelBox'>+ " + (Number(character.charisma) - 1) + "</span></div>" + "<div class='charRow'><span class='specLevel'>Intelligence</span><span class='levelBox'>" + character.intelligence + "</span><span class='levelBox'>+ " + (Number(character.intelligence) - 1) + "</span></div>" + "<div class='charRow'><span class='specLevel'>Agility</span><span class='levelBox'>" + character.agility + "</span><span class='levelBox'>+ " + (Number(character.agility) - 1) + "</span></div>" + "<div class='charRow'><span class='specLevel'>Luck</span><span class='levelBox'>" + character.luck + "</span><span class='levelBox'>+ " + (Number(character.luck) - 1) + "</span></div>" + "<div class='charRow'><span class='specLevel'>Points Left</span><span class='levelBox'>" + character.points + "</span><span class='levelBox'>- " + (21 - Number(character.points)) + "</span></div>");
}

function sortPerkArrayByLevel() {
    character.perkArray.sort(function(a, b) {
        var sortA = 0;
        var sortB = 0;

        if (a.levels != b.levels) {
            return (a.levels - b.levels);
        }

        if (a.priority != b.priority) {
            return (a.priority - b.priority);
        }
        switch (a.special.substring(0, 1)) {
            case "s":
                sortA = 1;
                break;
            case "p":
                sortA = 2;
                break;
            case "e":
                sortA = 3;
                break;
            case "c":
                sortA = 4;
                break;
            case "i":
                sortA = 5;
                break;
            case "a":
                sortA = 6;
                break;
            case "l":
                sortA = 7;
                break;
        }
        switch (b.special.substring(0, 1)) {
            case "s":
                sortB = 1;
                break;
            case "p":
                sortB = 2;
                break;
            case "e":
                sortB = 3;
                break;
            case "c":
                sortB = 4;
                break;
            case "i":
                sortB = 5;
                break;
            case "a":
                sortB = 6;
                break;
            case "l":
                sortB = 7;
                break;
        }
        if (sortA == sortB) {
            return (a.rank - b.rank);
        }
        return (sortA - sortB);
    })
}

function sortPerkArray() {
    character.perkArray.sort(function(a, b) {
        var sortA = 0;
        var sortB = 0;

        if (a.priority != b.priority) {
            return (a.priority - b.priority);
        }

        if (a.levels != b.levels) {
            return (a.levels - b.levels);
        }

        switch (a.special.substring(0, 1)) {
            case "s":
                sortA = 1;
                break;
            case "p":
                sortA = 2;
                break;
            case "e":
                sortA = 3;
                break;
            case "c":
                sortA = 4;
                break;
            case "i":
                sortA = 5;
                break;
            case "a":
                sortA = 6;
                break;
            case "l":
                sortA = 7;
                break;
        }
        switch (b.special.substring(0, 1)) {
            case "s":
                sortB = 1;
                break;
            case "p":
                sortB = 2;
                break;
            case "e":
                sortB = 3;
                break;
            case "c":
                sortB = 4;
                break;
            case "i":
                sortB = 5;
                break;
            case "a":
                sortB = 6;
                break;
            case "l":
                sortB = 7;
                break;
        }
        if (sortA == sortB) {
            return (a.rank - b.rank);
        }
        return (sortA - sortB);
    })
}

function getLevels(levels) {
    var temp = "";
    for (i = 0; i < 5; i++) {
        if (levels[i] !== undefined) pl = levels[i];
        else pl = "";
        temp += "<span class=\"levelBox\">" + pl + "</span>";
    }
    return (temp);
}

function buildPerkList() {
    sortPerkArray();
    var temp = "";
    $("#perk").html("<div class='perkRow'><span class='levelBox'>Pri</span><span class='specLevel'>Special</span><span class='levelBox'>Req</span><span class='perkName'>Perk</span><span class='perkLevels'>LVL</span><span class='tldr'>Description</span></div>");

    for (var i = 0; i < character.perkArray.length; i++) {
        $("#perk").html($("#perk").html() +
            "<div class='perkRow'>" +
                "<span class='levelBox'>" +
                    "<input class='priority' value=" + Number(character.perkArray[i].priority) + " special='" + character.perkArray[i].special + "' rank=" + character.perkArray[i].rank + " levels=" + character.perkArray[i].levels + " />" +
                "</span>" +
                "<span class='specLevel'>"  + character.perkArray[i].special    + "</span>" +
                "<span class='levelBox'>"   + character.perkArray[i].rank       + "</span>" +
                "<span class='perkName'>"   + character.perkArray[i].name       + "</span>" +
                "<span class='perkLevels'>" + character.perkArray[i].levels     + "</span>" +
                "<span class='tldr'>"       + character.perkArray[i].tldr       + "</span></div>");
    }

    var elt = $('#perk');

    if (elt.innerHeight() < elt[0].scrollHeight) {
        $("#perk").css("width", "1043px");
    } else {
        $("#perk").css("width", "1027px");
    }

    $(".priority").css("border", "1px solid #17ff14");}

function findHighestPriority() {
    array = character.perkArray.slice(0);
    array.sort(function (a, b) {
        return (b.priority - a.priority);
    });

//    alert (array[0].priority);
    return (array[0].priority);
}

function addPerk(special, rank, perkName, perkLevel, perkTldr, priority) {
    character.perkArray.splice(character.perkArray.length, 0, {
        special: special,
        rank: rank,
        name: perkName,
        levels: perkLevel,
        tldr: perkTldr,
        priority: priority
    });

}

function getPriority (special, rank) {
    var priority = 1;
    if (character.perkArray.length > 0) {
        var pri = findInPerkNoLevel(character.perkArray, special, rank);

        if (pri >= 0)
            priority = Number(character.perkArray[pri].priority)
        else
            priority = Number(findHighestPriority()) + 1;
    }

    return (priority);
}

function click(a) {
//    alert(a.checked);
    var temp = "";
    var pl = "";
    var i = 0;
    var priority = 1;
    var perkName;
    var perkLevel;
    var perkTldr;
    var p = a.value.split(",");
    switch (p[0]) {
        case "strength":
            perkName = perks.strength[p[1]].name;
            perkLevel = perks.strength[p[1]].levels[p[2]];
            perkTldr = perks.strength[p[1]].ranks[p[2]];
            break;
        case "perception":
            perkName = perks.perception[p[1]].name;
            perkLevel = perks.perception[p[1]].levels[p[2]];
            perkTldr = perks.perception[p[1]].ranks[p[2]];
            break;
        case "endurance":
            perkName = perks.endurance[p[1]].name;
            perkLevel = perks.endurance[p[1]].levels[p[2]];
            perkTldr = perks.endurance[p[1]].ranks[p[2]];
            break;
        case "charisma":
            perkName = perks.charisma[p[1]].name;
            perkLevel = perks.charisma[p[1]].levels[p[2]];
            perkTldr = perks.charisma[p[1]].ranks[p[2]];
            break;
        case "intelligence":
            perkName = perks.intelligence[p[1]].name;
            perkLevel = perks.intelligence[p[1]].levels[p[2]];
            perkTldr = perks.intelligence[p[1]].ranks[p[2]];
            break;
        case "agility":
            perkName = perks.agility[p[1]].name;
            perkLevel = perks.agility[p[1]].levels[p[2]];
            perkTldr = perks.agility[p[1]].ranks[p[2]];
            break;
        case "luck":
            perkName = perks.luck[p[1]].name;
            perkLevel = perks.luck[p[1]].levels[p[2]];
            perkTldr = perks.luck[p[1]].ranks[p[2]];
            break;
    }

    rank = 1 + Number(p[1]);

    priority = getPriority(p[0], rank);

    if (a.checked) {
        if (findInPerk(character.perkArray, p[0], rank, perkLevel) < 0) {
            addPerk(p[0], rank, perkName, perkLevel, perkTldr, priority);
        }
    } else {
        if (findInPerk(character.perkArray, p[0], rank, perkLevel) >= 0) {
            character.perkArray.splice(findInPerk(character.perkArray, p[0], rank, perkLevel), 1);
        }
    }

}


function random() {
    reset();
    
    setTimeout(function() {
        while (character.perkArray.length < 35) {
            var special = Math.floor(Math.random() * 7) + 1;
            var rank = Math.floor(Math.random() * 10);
            var lvl = 0;

            var perk;
            var special;
            var rank;
            var perkName;
            var perkTldr;

            switch (special) {
                case 1:
                    special = "strength";
                    levels = perks.strength[rank].levels;
                    perkName = perks.strength[rank].name;
                    perkTldr = perks.strength[rank].ranks;
                    break;
                case 2:
                    special = "perception";
                    levels = perks.perception[rank].levels;
                    perkName = perks.perception[rank].name;
                    perkTldr = perks.perception[rank].ranks;
                    break;
                case 3:
                    special = "endurance";
                    levels = perks.endurance[rank].levels;
                    perkName = perks.endurance[rank].name;
                    perkTldr = perks.endurance[rank].ranks;
                    break;
                case 4:
                    special = "charisma";
                    levels = perks.charisma[rank].levels;
                    perkName = perks.charisma[rank].name;
                    perkTldr = perks.charisma[rank].ranks;
                    break;
                case 5:
                    special = "intelligence";
                    levels = perks.intelligence[rank].levels;
                    perkName = perks.intelligence[rank].name;
                    perkTldr = perks.intelligence[rank].ranks;
                    break;
                case 6:
                    special = "agility";
                    levels = perks.agility[rank].levels;
                    perkName = perks.agility[rank].name;
                    perkTldr = perks.agility[rank].ranks;
                    break;
                case 7:
                    special = "luck";
                    levels = perks.luck[rank].levels;
                    perkName = perks.luck[rank].name;
                    perkTldr = perks.luck[rank].ranks;
                    break;
            }

            priority = getPriority(special, rank);

            lvl = Math.floor(Math.random() * levels.length) + 1;

            for (var i = 0; i < lvl; i++) {
                addPerk(special, rank + 1, perkName, levels[i], perkTldr[i], priority);
                $("input[type='checkbox'][value='" + special + "," + rank + "," + i + "']").prop("checked", true)
            }
        }

        calculate();
    }, 40);
    
//    buildPerkList();
}

function selectAll() {
    character.perkArray = [];
    character.level = [];
    document.getElementById("progress").innerHTML = "<p>Selecting...</p>";
    $("button").prop('disabled', true);
    setTimeout(function() {
        $("input[type='checkbox']").prop("checked", true);
        $("input[type='checkbox']").each(function() {
            click(this);
        });
        buildPerkList();
        buildSpecials();
        displayLevels();
        document.getElementById("progress").innerHTML = "<p>Selected</p>";
        $("button").prop('disabled', false);
    }, 30);
}

function reset() {
    document.getElementById("progress").innerHTML = "<p>Resetting...</p>";
    $("button").prop('disabled', true);
    $("#perk").css("width", "-=16");

    setTimeout(function() {
        $("input[type='checkbox']").prop("checked", false);
        $("input[type='checkbox']").each(function() {
            click(this);
        });
        character.level = [];
        character.perkArray = [];
        buildPerkList();
        buildSpecials();
        displayLevels();
        document.getElementById("progress").innerHTML = "<p>Reset</p>";
        $("button").prop('disabled', false);
    }, 30);
}

function getPerks(perk, special, val) {
    var temp = "";

    for (var i = perk.levels.length - 1; i >= 0; i--) {
        temp += "<label class='checkbox'><input type='checkbox' value='" + special + "," + val + "," + i + "' /><span></span></label>";
    }

    return (temp);
}

function updateChecks() {
}

//function perkHoverOn(a, event) {
function perkHoverOn(event) {
//    alert("something")

//    a = $(a).children("input[type='checkbox']").val();
    a = $("input[type='checkbox']:hover").val();
    a = a.split(",");

    switch (a[0]) {
        case "strength":
            p = perks.strength[a[1]];
            p = p.name + "<br />Level: " + p.levels[a[2]] + "<br />" + p.ranks[a[2]];
            break;
        case "perception":
            p = perks.perception[a[1]];
            p = p.name + "<br />Level: " + p.levels[a[2]] + "<br />" + p.ranks[a[2]];
            break;
        case "endurance":
            p = perks.endurance[a[1]];
            p = p.name + "<br />Level: " + p.levels[a[2]] + "<br />" + p.ranks[a[2]];
            break;
        case "charisma":
            p = perks.charisma[a[1]];
            p = p.name + "<br />Level: " + p.levels[a[2]] + "<br />" + p.ranks[a[2]];
            break;
        case "intelligence":
            p = perks.intelligence[a[1]];
            p = p.name + "<br />Level: " + p.levels[a[2]] + "<br />" + p.ranks[a[2]];
            break;
        case "agility":
            p = perks.agility[a[1]];
            p = p.name + "<br />Level: " + p.levels[a[2]] + "<br />" + p.ranks[a[2]];
            break;
        case "luck":
            p = perks.luck[a[1]];
            p = p.name + "<br />Level: " + p.levels[a[2]] + "<br />" + p.ranks[a[2]];
            break;
    }

    $("#perkHover").html(p);
    $("#perkHover").css({
        display: "inline",
        background: "#001a00",
        color: "#17ff14",
        maxWidth: "200px",
        position: "absolute",
        padding: "2px",
        top: event.pageY + 5,
        left: event.pageX + 5
    })
}

function perkHoverOff() {
    $("#perkHover").css({display: "none"});
}

$(document).ready(function() {
    var temp = "";
    temp += "<div>";
    temp += "<span class='specialLevel'></span>";
    temp += "<span class='special'>Strength</span>";
    temp += "<span class='special'>Perception</span>";
    temp += "<span class='special'>Endurance</span>";
    temp += "<span class='special'>Charisma</span>";
    temp += "<span class='special'>Intelligence</span>";
    temp += "<span class='special'>Agility</span>";
    temp += "<span class='special'>Luck</span>";
    temp += "</div>";
    for (var i = 0; i < perks.strength.length; i++) {
        temp += "<div>";
        temp += "<span class='specialLevel'>" + (i + 1) + "</span>";
        temp += "<span class='perk'><span>" + perks.strength[i].name     + "</span>" + getPerks(perks.strength[i],     "strength",     i) + "</span>";
        temp += "<span class='perk'><span>" + perks.perception[i].name   + "</span>" + getPerks(perks.perception[i],   "perception",   i) + "</span>";
        temp += "<span class='perk'><span>" + perks.endurance[i].name    + "</span>" + getPerks(perks.endurance[i],    "endurance",    i) + "</span>";
        temp += "<span class='perk'><span>" + perks.charisma[i].name     + "</span>" + getPerks(perks.charisma[i],     "charisma",     i) + "</span>";
        temp += "<span class='perk'><span>" + perks.intelligence[i].name + "</span>" + getPerks(perks.intelligence[i], "intelligence", i) + "</span>";
        temp += "<span class='perk'><span>" + perks.agility[i].name      + "</span>" + getPerks(perks.agility[i],      "agility",      i) + "</span>";
        temp += "<span class='perk'><span>" + perks.luck[i].name         + "</span>" + getPerks(perks.luck[i],         "luck",         i) + "</span>";
        temp += "</div>";
    }
    $("#perkSelect").html(temp);

    $("#perkSelect").ready(function () {
        $("input[type='checkbox']").change(function() {
//            alert($(this).prop("checked"));

            if ($(this).prop("checked") === false) {
                $(this).parents(".perk").find("input[type='checkbox']").prop("checked", false);
                $(this).prop("checked", false)
            } else {
                $(this).parents(".perk").find("input[type='checkbox']").prop("checked", false);
                $(this).prop("checked", true);
            }

            $("label.checkbox:hover ~ label.checkbox > input[type='checkbox']").prop("checked",  true);

            var checks = $(this).parents(".perk").find("input[type='checkbox']");
//            alert (checks.length);

            for (var i = checks.length - 1; i >= 0; i--) {
                click(checks[i]);
//                alert(checks[i].checked + " " + checks[i].value);
            }

            buildPerkList();
        });

        $("input[type='checkbox']").click(function(event) {
            event.stopPropagation();
        });

/*
        updateChecks();
        perkHover();
//        event.stopPropagation();
*/
        $(".checkbox").hover(perkHoverOn, perkHoverOff);

        $("#perkSelect > div:not(:first-child) > span").click(function(event) {
            $(this).children("input[type='checkbox']").click();
        });
    });

    buildPerkList();
    buildSpecials();
    displayLevels();
});
